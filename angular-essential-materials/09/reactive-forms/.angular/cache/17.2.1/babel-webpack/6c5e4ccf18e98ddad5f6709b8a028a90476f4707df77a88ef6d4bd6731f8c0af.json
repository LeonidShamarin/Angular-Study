{"ast":null,"code":"export class userDataValidation {\n  static passport(control /*поле с формы*/) {\n    let passportRegex = /^([A-ZА-Я]{2}[0-9]{6})$|^([0-9]{9})$/;\n    // Значение поля с формы\n    let value = control.value;\n    // Проверка поля по регулярному выражению\n    let result = passportRegex.test(value);\n    if (result) {\n      return null;\n    } else {\n      return {\n        \"passportValidator\": {\n          value\n        }\n      };\n    }\n  }\n  static birthYear(minYear, maxYear) {\n    return control => {\n      let value = control.value;\n      // Значение поля с формы\n      let age = parseInt(value);\n      // Проверки\n      if (isNaN(age)) {\n        return {\n          \"ageValidator\": {\n            value: 'Указаны не числа. Укажите корректный год вашего рождения'\n          }\n        };\n      } else if (age != control.value) {\n        return {\n          \"ageValidator\": {\n            value: 'Дробные числа не допускаються. Укажите корректный год вашего рождения'\n          }\n        };\n      } else if (age < minYear || age > maxYear) {\n        return {\n          \"ageValidator\": {\n            value: 'Не подходящий возраст.'\n          }\n        };\n      } else {\n        return null;\n      }\n    };\n  }\n}\nexport function passportFunc(control /*поле с формы*/) {\n  let passportRegex = /^([A-ZА-Я]{2}[0-9]{6})$|^([0-9]{9})$/;\n  // Значение поля с формы\n  let value = control.value;\n  // Проверка поля по регулярному выражению\n  let result = passportRegex.test(value);\n  if (result) {\n    return null;\n  } else {\n    return {\n      \"passportValidator\": {\n        value\n      }\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}